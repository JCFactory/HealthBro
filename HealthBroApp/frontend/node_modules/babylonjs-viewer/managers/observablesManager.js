"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("babylonjs/Misc/observable");
var ObservablesManager = /** @class */ (function () {
    function ObservablesManager() {
        this.onSceneInitObservable = new observable_1.Observable();
        this.onEngineInitObservable = new observable_1.Observable();
        this.onModelLoadedObservable = new observable_1.Observable();
        this.onModelLoadProgressObservable = new observable_1.Observable();
        this.onModelLoadErrorObservable = new observable_1.Observable();
        this.onModelAddedObservable = new observable_1.Observable();
        this.onModelRemovedObservable = new observable_1.Observable();
        this.onViewerInitDoneObservable = new observable_1.Observable();
        this.onViewerInitStartedObservable = new observable_1.Observable();
        this.onLoaderInitObservable = new observable_1.Observable();
        this.onFrameRenderedObservable = new observable_1.Observable();
        this.onEnteringVRObservable = new observable_1.Observable();
        this.onExitingVRObservable = new observable_1.Observable();
    }
    ObservablesManager.prototype.dispose = function () {
        this.onSceneInitObservable.clear();
        this.onEngineInitObservable.clear();
        this.onModelLoadedObservable.clear();
        this.onModelLoadProgressObservable.clear();
        this.onModelLoadErrorObservable.clear();
        this.onModelAddedObservable.clear();
        this.onModelRemovedObservable.clear();
        this.onViewerInitDoneObservable.clear();
        this.onLoaderInitObservable.clear();
        this.onFrameRenderedObservable.clear();
        this.onEnteringVRObservable.clear();
        this.onExitingVRObservable.clear();
    };
    return ObservablesManager;
}());
exports.ObservablesManager = ObservablesManager;
//# sourceMappingURL=observablesManager.js.map