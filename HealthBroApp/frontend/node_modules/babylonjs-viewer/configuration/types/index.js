"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var minimal_1 = require("./minimal");
exports.minimalConfiguration = minimal_1.minimalConfiguration;
var default_1 = require("./default");
exports.defaultConfiguration = default_1.defaultConfiguration;
var extended_1 = require("./extended");
var shadowLight_1 = require("./shadowLight");
var environmentMap_1 = require("./environmentMap");
var helper_1 = require("../../helper/");
/**
 * Get the configuration type you need to use as the base for your viewer.
 * The types can either be a single string, or comma separated types that will extend each other. for example:
 *
 * "default, environmentMap" will first load the default configuration and will extend it using the environmentMap configuration.
 *
 * @param types a comma-separated string of the type(s) or configuration to load.
 */
var getConfigurationType = function (types) {
    var config = {};
    var typesSeparated = types.split(",");
    typesSeparated.forEach(function (type) {
        switch (type.trim()) {
            case 'environmentMap':
                config = helper_1.deepmerge(config, environmentMap_1.environmentMapConfiguration);
                break;
            case 'shadowDirectionalLight':
                config = helper_1.deepmerge(config, shadowLight_1.shadowDirectionalLightConfiguration);
                break;
            case 'shadowSpotLight':
                config = helper_1.deepmerge(config, shadowLight_1.shadowSpotlLightConfiguration);
                break;
            case 'default':
                config = helper_1.deepmerge(config, default_1.defaultConfiguration);
                break;
            case 'minimal':
                config = helper_1.deepmerge(config, minimal_1.minimalConfiguration);
                break;
            case 'none':
                break;
            case 'extended':
            default:
                config = helper_1.deepmerge(config, extended_1.extendedConfiguration);
                break;
        }
        if (config.extends) {
            config = helper_1.deepmerge(config, getConfigurationType(config.extends));
        }
    });
    return config;
};
exports.getConfigurationType = getConfigurationType;
//# sourceMappingURL=index.js.map