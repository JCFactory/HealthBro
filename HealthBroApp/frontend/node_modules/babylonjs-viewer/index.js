"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var mappers_1 = require("./configuration/mappers");
exports.mapperManager = mappers_1.mapperManager;
var globals_1 = require("./configuration/globals");
exports.viewerGlobals = globals_1.viewerGlobals;
var viewerManager_1 = require("./viewer/viewerManager");
exports.viewerManager = viewerManager_1.viewerManager;
var defaultViewer_1 = require("./viewer/defaultViewer");
exports.DefaultViewer = defaultViewer_1.DefaultViewer;
var viewer_1 = require("./viewer/viewer");
exports.AbstractViewer = viewer_1.AbstractViewer;
var telemetryManager_1 = require("./managers/telemetryManager");
exports.telemetryManager = telemetryManager_1.telemetryManager;
var modelLoader_1 = require("./loader/modelLoader");
exports.ModelLoader = modelLoader_1.ModelLoader;
var viewerModel_1 = require("./model/viewerModel");
exports.ViewerModel = viewerModel_1.ViewerModel;
exports.ModelState = viewerModel_1.ModelState;
var viewerTemplatePlugin_1 = require("./templating/viewerTemplatePlugin");
exports.AbstractViewerNavbarButton = viewerTemplatePlugin_1.AbstractViewerNavbarButton;
var custom_1 = require("./optimizer/custom");
exports.registerCustomOptimizer = custom_1.registerCustomOptimizer;
/**
 * BabylonJS Viewer
 *
 * An HTML-Based viewer for 3D models, based on BabylonJS and its extensions.
 */
var BABYLON = require("babylonjs");
exports.BABYLON = BABYLON;
// load needed modules.
require("babylonjs-loaders");
require("pepjs");
var initializer_1 = require("./initializer");
exports.InitTags = initializer_1.InitTags;
// promise polyfill, if needed!
BABYLON.PromisePolyfill.Apply();
initializer_1.initListeners();
//deprectaed, here for backwards compatibility
var disableInit = globals_1.viewerGlobals.disableInit;
exports.disableInit = disableInit;
/**
 * Dispose all viewers currently registered
 */
function disposeAll() {
    viewerManager_1.viewerManager.dispose();
    mappers_1.mapperManager.dispose();
    telemetryManager_1.telemetryManager.dispose();
}
exports.disposeAll = disposeAll;
var Version = globals_1.viewerGlobals.version;
exports.Version = Version;
console.log("Babylon.js viewer (v" + Version + ")");
var babylonjs_loaders_1 = require("babylonjs-loaders");
exports.GLTF2 = babylonjs_loaders_1.GLTF2;
// export publicliy all configuration interfaces
__export(require("./configuration"));
//# sourceMappingURL=index.js.map