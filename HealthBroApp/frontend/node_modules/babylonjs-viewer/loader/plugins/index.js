"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var telemetryLoaderPlugin_1 = require("./telemetryLoaderPlugin");
exports.TelemetryLoaderPlugin = telemetryLoaderPlugin_1.TelemetryLoaderPlugin;
var msftLodLoaderPlugin_1 = require("./msftLodLoaderPlugin");
exports.MSFTLodLoaderPlugin = msftLodLoaderPlugin_1.MSFTLodLoaderPlugin;
var applyMaterialConfig_1 = require("./applyMaterialConfig");
exports.ApplyMaterialConfigPlugin = applyMaterialConfig_1.ApplyMaterialConfigPlugin;
var extendedMaterialLoaderPlugin_1 = require("./extendedMaterialLoaderPlugin");
exports.ExtendedMaterialLoaderPlugin = extendedMaterialLoaderPlugin_1.ExtendedMaterialLoaderPlugin;
var tools_1 = require("babylonjs/Misc/tools");
var pluginCache = {};
/**
 * Get a loader plugin according to its name.
 * The plugin will be cached and will be reused if called for again.
 *
 * @param name the name of the plugin
 */
function getLoaderPluginByName(name) {
    if (!pluginCache[name]) {
        switch (name) {
            case 'telemetry':
                pluginCache[name] = new telemetryLoaderPlugin_1.TelemetryLoaderPlugin();
                break;
            case 'msftLod':
                pluginCache[name] = new msftLodLoaderPlugin_1.MSFTLodLoaderPlugin();
                break;
            case 'applyMaterialConfig':
                pluginCache[name] = new applyMaterialConfig_1.ApplyMaterialConfigPlugin();
                break;
            case 'extendedMaterial':
                pluginCache[name] = new extendedMaterialLoaderPlugin_1.ExtendedMaterialLoaderPlugin();
                break;
        }
    }
    return pluginCache[name];
}
exports.getLoaderPluginByName = getLoaderPluginByName;
/**
 *
 */
function addLoaderPlugin(name, plugin) {
    if (pluginCache[name]) {
        tools_1.Tools.Warn("Overwriting plugin with the same name - " + name);
    }
    pluginCache[name] = plugin;
}
exports.addLoaderPlugin = addLoaderPlugin;
//# sourceMappingURL=index.js.map